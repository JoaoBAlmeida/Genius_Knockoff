// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2021 21:25:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    genius_knockoff
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module genius_knockoff_vlg_sample_tst(
	btn0,
	btn1,
	btn2,
	btn3,
	clk,
	rst,
	sampler_tx
);
input  btn0;
input  btn1;
input  btn2;
input  btn3;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(btn0 or btn1 or btn2 or btn3 or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module genius_knockoff_vlg_check_tst (
	led0,
	led1,
	led2,
	led3,
	sampler_rx
);
input  led0;
input  led1;
input  led2;
input  led3;
input sampler_rx;

reg  led0_expected;
reg  led1_expected;
reg  led2_expected;
reg  led3_expected;

reg  led0_prev;
reg  led1_prev;
reg  led2_prev;
reg  led3_prev;

reg  led0_expected_prev;
reg  led1_expected_prev;
reg  led2_expected_prev;
reg  led3_expected_prev;

reg  last_led0_exp;
reg  last_led1_exp;
reg  last_led2_exp;
reg  last_led3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	led0_prev = led0;
	led1_prev = led1;
	led2_prev = led2;
	led3_prev = led3;
end

// update expected /o prevs

always @(trigger)
begin
	led0_expected_prev = led0_expected;
	led1_expected_prev = led1_expected;
	led2_expected_prev = led2_expected;
	led3_expected_prev = led3_expected;
end



// expected led0
initial
begin
	led0_expected = 1'bX;
	led0_expected = #79000 1'b0;
	led0_expected = #1000 1'bX;
end 

// expected led1
initial
begin
	led1_expected = 1'bX;
	led1_expected = #79000 1'b0;
	led1_expected = #1000 1'bX;
end 

// expected led2
initial
begin
	led2_expected = 1'bX;
	led2_expected = #79000 1'b0;
	led2_expected = #1000 1'bX;
end 

// expected led3
initial
begin
	led3_expected = 1'bX;
	led3_expected = #79000 1'b0;
	led3_expected = #1000 1'bX;
end 
// generate trigger
always @(led0_expected or led0 or led1_expected or led1 or led2_expected or led2 or led3_expected or led3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led0 = %b | expected led1 = %b | expected led2 = %b | expected led3 = %b | ",led0_expected_prev,led1_expected_prev,led2_expected_prev,led3_expected_prev);
	$display("| real led0 = %b | real led1 = %b | real led2 = %b | real led3 = %b | ",led0_prev,led1_prev,led2_prev,led3_prev);
`endif
	if (
		( led0_expected_prev !== 1'bx ) && ( led0_prev !== led0_expected_prev )
		&& ((led0_expected_prev !== last_led0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led0_expected_prev);
		$display ("     Real value = %b", led0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led0_exp = led0_expected_prev;
	end
	if (
		( led1_expected_prev !== 1'bx ) && ( led1_prev !== led1_expected_prev )
		&& ((led1_expected_prev !== last_led1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led1_expected_prev);
		$display ("     Real value = %b", led1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led1_exp = led1_expected_prev;
	end
	if (
		( led2_expected_prev !== 1'bx ) && ( led2_prev !== led2_expected_prev )
		&& ((led2_expected_prev !== last_led2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led2_expected_prev);
		$display ("     Real value = %b", led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led2_exp = led2_expected_prev;
	end
	if (
		( led3_expected_prev !== 1'bx ) && ( led3_prev !== led3_expected_prev )
		&& ((led3_expected_prev !== last_led3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led3_expected_prev);
		$display ("     Real value = %b", led3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led3_exp = led3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#400000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module genius_knockoff_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn0;
reg btn1;
reg btn2;
reg btn3;
reg clk;
reg rst;
// wires                                               
wire led0;
wire led1;
wire led2;
wire led3;

wire sampler;                             

// assign statements (if any)                          
genius_knockoff i1 (
// port map - connection between master ports and signals/registers   
	.btn0(btn0),
	.btn1(btn1),
	.btn2(btn2),
	.btn3(btn3),
	.clk(clk),
	.led0(led0),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.rst(rst)
);

// clk
initial
begin
	clk = 1'b1;
	# 5000;
	repeat(39)
	begin
		clk = 1'b0;
		clk = #5000 1'b1;
		# 5000;
	end
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #10000 1'b0;
end 

// btn0
initial
begin
	btn0 = 1'b0;
	btn0 = #150000 1'b1;
	btn0 = #10000 1'b0;
end 

// btn1
initial
begin
	btn1 = 1'b0;
	btn1 = #210000 1'b1;
	btn1 = #10000 1'b0;
end 

// btn2
initial
begin
	btn2 = 1'b0;
	btn2 = #170000 1'b1;
	btn2 = #10000 1'b0;
	btn2 = #50000 1'b1;
	btn2 = #10000 1'b0;
end 

// btn3
initial
begin
	btn3 = 1'b0;
	btn3 = #190000 1'b1;
	btn3 = #10000 1'b0;
end 

genius_knockoff_vlg_sample_tst tb_sample (
	.btn0(btn0),
	.btn1(btn1),
	.btn2(btn2),
	.btn3(btn3),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

genius_knockoff_vlg_check_tst tb_out(
	.led0(led0),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.sampler_rx(sampler)
);
endmodule

